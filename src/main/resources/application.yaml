# Server Configuration
server:
  port: 9090

# Spring Cloud API Gateway Configuration
spring:
  application:
    name: spring-cloud-api-gateway

  # Enable Docker Compose support
  docker:
    compose:
      enabled: true
      file: compose.yml

  # OAuth2 Client Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/realms/master/protocol/openid-connect/certs # Keycloak JWK Set URI
          principal-claim-name: preferred_username # Claim to use as the principal name

      client: # OAuth2 Client Configuration (when Gateway acts as a Resource Server)
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/master
            authorization-uri: http://localhost:8080/realms/master/protocol/openid-connect/auth
            token-uri: http://localhost:8080/realms/master/protocol/openid-connect/token
            user-info-uri: http://localhost:8080/realms/master/protocol/openid-connect/userinfo
            jwk-set-uri: http://localhost:8080/realms/master/protocol/openid-connect/certs
            user-name-attribute: preferred_username
            
        registration: # OAuth2 Client Configuration (when Gateway acts as a Client)
          web-app-client:
            provider: keycloak
            client-id: web-app-client
            client-secret: j0BDFgqsxpq9OWCOzGehx7sYrqhoBRbb
            authorization-grant-type: authorization_code
            scope: openid,email,profile
            # here we use the baseUrl to dynamically set the redirect URI
            # This is useful when running in different environments
            # it must be same at Keycloak Client Configuration
            # as an example: http://localhost:9090/login/oauth2/code/web-app-client
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
  
  cloud:
    gateway:

      # Global filters
      # default-filters: 
      #   - RequestIdFilter # Custom filter to add a unique request ID to each request

      routes:
        # CREATE: Allow only POST on /posts
        - id: posts-service-create
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts
            - Method=POST

        # READ ALL: Allow only GET on /posts
        - id: posts-service-list
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts
            - Method=GET

        # READ ONE: Allow only GET on /posts/{id}
        - id: posts-service-get-by-id
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts/{segment}
            - Method=GET
          filters:
            - TokenRelay=
            - name: RequestRateLimiter 
              args:
                # Principal Name Key Resolver is Defulat Implementation provided by Spring Cloud Gateway
                # It uses the principal name from the JWT token as the key for rate limiting
                # you can see the implementation for it with class PrincipalNameKeyResolver.class
                key-resolver: "#{@principalNameKeyResolver}" 
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 2
                redis-rate-limiter.requestedTokens: 1
                
        # Allow GET and PUT on /posts/{id} (get and update)
        # UPDATE: Allow only PUT on /posts/{id}
        - id: posts-service-update-by-id
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts/{segment}
            - Method=PUT

        # DELETE: Allow only DELETE on /posts/{id}
        - id: posts-service-delete-by-id
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts/{segment}
            - Method=DELETE

        # Allow only GET on /posts/{id}/comments
        - id: posts-service-get-comments-by-post
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/posts/{segment}/comments
            - Method=GET


        # Allow only GET on /comments with postId query param
        - id: comments-service
          uri: https://jsonplaceholder.typicode.com
          predicates:
            - Path=/comments
            - Method=GET
            - Query=postId, [0-9]+

  # Redis Rate Limiter Configuration
  data:
    redis:
      host: localhost
      port: 6379


# Zipkin Tracing Configuration
management:
  tracing:
    sampling:
      probability: 1.0 # 100% sampling, adjust as needed
    enabled: true

  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans # Default Zipkin endpoint



# Logging Configuration
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    org.springframework.boot.autoconfigure.web: DEBUG
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO
    org.springframework.security.oauth2.server.resource: DEBUG
    org.springframework.security.authentication: DEBUG
    org.springframework.security.web.server: DEBUG
    reactor.netty: DEBUG
    redisratelimiter: DEBUG
    org.springframework.cloud.circuitbreaker: DEBUG
    org.springframework.cloud.circuitbreaker.resilience4j: DEBUG
    io.github.resilience4j: DEBUG